#!/usr/bin/env python3
# python loglan
# When referencing Geolog variables in a Python script, names must always be lower case.

# Imports
import geolog
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize



# Load data from geolog
while geolog.getrow():


    # Put your code here !!!


    df = pd.DataFrame({'p1':p1, 'p2':p2,'p3':p3, 'p4':p4,'p5':p5, 'p6':p6,'p7':p7, 'p8':p8 })



    def func(x,p1,p2,p3,p4,p5,p6,p7,p8):
        return (p1*np.exp(-x/4)+p2*np.exp(-x/8)+p3*np.exp(-x/16)+p4*np.exp(-x/32)+p5*np.exp(-x/64)+p6*np.exp(-x/128)+p7*np.exp(-x/256)+p8*np.exp(-x/512))


    def obj_func(params, x, y, lambda_):
        p1, p2, p3, p4, p5, p6, p7, p8 = params
        residuals = y - func(x, p1, p2, p3, p4, p5, p6, p7, p8)
        regularization = lambda_ * (p1**2 + p2**2 + p3**2 + p4**2 + p5**2 + p6**2 + p7**2 + p8**2)
        return np.sum(residuals**2) + regularization


    '''
    ---------------------------------------------------------------------------
    This is where we want to stack the data for a less noisy echotrain
    
    Set Level Spacing, Stacking levels and Noise below
      
            *** Stack_levels from 1 (no stacking) to 9 stacked levels *** 
    ---------------------------------------------------------------------------
    '''
    #level_spacing = .5  # well level spacing and this model works best on 0.5 data???
    #stack_levels  = 1   # odd numbers are geat, even changes level spacing in new depth offset of 0.25 ' 
    #noise         = 1.5 # in porosity units
    '''
    ---------------------------------------------------------------------------
             *** Stack_levels from 1 (no stacking) to 9 stacked levels *** 
    ---------------------------------------------------------------------------
    '''

    T2 =[2,4,8,16,32,64,128,256,512,1024,2048]


    deptharray=[]
    mphi=[]    
    mbvi=[]
    mffi=[]    
    echo=[]
    ystack=[]
    T21=[]
    T22 = []
    optbins = []
    #ystack2=[]
    #ystackecho=[]

    p0=0
    p9=0
    p10=0
    bins=[p0,p1,p2,p3,p4,p5,p6,p7,p8,p9]
    #print(bins)


    #Define the data to be fit with some noise:
    '''
      This is the xdata for TE x number of echoes for 240ms of echo train data
    '''
    xdata = np.linspace(0, 240, 201)
    print(len(xdata))

    #print(len(p1))

    '''
      Calculate Echo Train data using xdata and func for echo train equation
    '''
    y = func(xdata,p1, p2, p3,  p4, p5, p6,  p7,  p8)
    #np.random.seed(1729)

    
    '''
      add noise to the echo train data to create a typical echo train
    '''
    y_noise  = noise * np.random.normal(size=xdata.size)
    ydata = y + y_noise
    
     
    '''
      Store Echo Trains in np array
    '''
    echo  = ydata
    #yecho = pd.DataFrame(echo)
    yecho = echo
    

    ystack = ydata
                 
   
    
    '''
        -----------------------------------------------------------------------------------------------
          Optimization using SciPy with regularization: 
        -----------------------------------------------------------------------------------------------
    '''
    # Fit the function to the data with regularization
    bnds = [(0, 20)]*8
    lambda_ = 1  #started with 0.1
    p0 = np.ones(8)
    result = minimize(obj_func, p0, args=(xdata, ystack, lambda_), method='L-BFGS-B', bounds=bnds)
    popt = result.x

    print("Inversion Porosities:" , popt)
        
    '''
        ------------------------------------------------------------------------------------------------
        The parameter lambda_ determines the strength of the regularization. 

        A smaller value of lambda_ will result in a stronger regularization and a simpler solution, 
        while a larger value of lambda_ will result in a weaker regularization and a more complex solution. 

        You can adjust the value of lambda_ to find a good balance between fitting the data and preventing overfitting.
        --------------------------------------------------------------------------------------------------
    '''

        
        
        
        
    ''' Calculate BVI, MFFI and MPHI '''
    mbvi = (popt[0]+popt[1]+popt[2]+0.044*popt[3])    
    mphi = (popt[0]+popt[1]+popt[2]+popt[3]+popt[4]+popt[5]+popt[6]+popt[7])
    mffi = ((1-0.044)*popt[3]+popt[4]+popt[5]+popt[6]+popt[7])

    #multiplier = (1 - level_spacing)/2
    #deptharray.append(depth - (stack_levels-1)/2 + multiplier*(stack_levels-1))
        
    optbins  = [p0,popt[0],popt[1],popt[2],popt[3],popt[4],popt[5],popt[6],popt[7],p9] 
    #T2       = [2,  4,      8,     16,     32,     64,     128,    256,   512,   1024, 2048]
    #bins     = [p0, p1,    p2,     P3,     P4,     P5,      P6,     P7,    P8,    P9,   P10]
    
    optbins[0] = 0
    optbins[1] = popt[0]
    optbins[2] = popt[1]
    optbins[3] = popt[2]
    optbins[4] = popt[3]
    optbins[5] = popt[4]
    optbins[6] = popt[5]
    optbins[7] = popt[6]
    optbins[8] = popt[7]
    optbins[9] = 0

    

        




    # Store data into geolog
    geolog.putrow()

