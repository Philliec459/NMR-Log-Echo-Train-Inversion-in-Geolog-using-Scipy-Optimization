#!/usr/bin/env python3
# python loglan
# When referencing Geolog variables in a Python script, names must always be lower case.

# Imports
import geolog
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from scipy.optimize import minimize
from scipy.optimize import least_squares
from scipy.optimize import curve_fit


#%matplotlib tk


# Load data from geolog
while geolog.gettable():


    # Put your code here !!!


    df = pd.DataFrame({'depth':depth, 'p1':p1, 'p2':p2,'p3':p3, 'p4':p4,'p5':p5, 'p6':p6,'p7':p7, 'p8':p8 })



    def func(x,p1,p2,p3,p4,p5,p6,p7,p8):
        return (p1*np.exp(-x/4)+p2*np.exp(-x/8)+p3*np.exp(-x/16)+p4*np.exp(-x/32)+p5*np.exp(-x/64)+p6*np.exp(-x/128)+p7*np.exp(-x/256)+p8*np.exp(-x/512))


    def obj_func(params, x, y, lambda_):
        p1, p2, p3, p4, p5, p6, p7, p8 = params
        residuals = y - func(x, p1, p2, p3, p4, p5, p6, p7, p8)
        regularization = lambda_ * (p1**2 + p2**2 + p3**2 + p4**2 + p5**2 + p6**2 + p7**2 + p8**2)
        return np.sum(residuals**2) + regularization
    
    # Define the objective function to be minimized, including a regularization term
    def objective(p, x, y, alpha):
        y_pred = func(x, *p)
        error = y - y_pred
        regularization_term = alpha * np.sum(np.square(p))
        return np.concatenate([error, np.sqrt(alpha) * p])
    
        
    deptharray=[]
    mphi = []    
    mbvi = []
    mffi = []    
    echo  = []
    echo_out  = []
    fit  = []
    ystack= []
    T21   = []
    T22   = []
    optbins = []
    depth3 = []


    # Load log data from df
    for index, row in df.iterrows():

    #for k in range(0,len(df) ,1):
        depth2=depth[index]      
        P0=0
        P1=p1[index]
        P2=p2[index]
        P3=p3[index]
        P4=p4[index]
        P5=p5[index]
        P6=p6[index]
        P7=p7[index]
        P8=p8[index]
        P9=0
    
        #depth=depth
        bins=[P0,P1,P2,P3,P4,P5,P6,P7,P8,P9]
        pp1 = P1
        pp2 = P2
        pp3 = P3
        pp4 = P4
        pp5 = P5
        pp6 = P6
        pp7 = P7
        pp8 = P8 
    
        # Define the T2 times
        T2_times = np.array([4, 8, 16, 32, 64, 128, 256, 512])


        #Define the data to be fit with some noise:
        '''
         This is the xdata for TE (1.2msec) x number of echoes for 240ms of echo train data
        '''
        # create x array with 200-300 elements
        #num_echoes = 300
        #TE = 1.2  # echo spacing (ms)
        x = np.arange(num_echoes) * te
        #xdata = np.linspace(0, 240, 201)
        xdata = x

        # Calculate the echo train for each channel
        y_inphase = func(x, pp1, pp2, pp3, pp4, pp5, pp6, pp7, pp8)
        y_quadrature = func(x+T2_times[-1]*3/4, pp1, pp2, pp3, pp4, pp5, pp6, pp7, pp8)


        # y_noise  = noise * np.random.normal(size=xdata.size)
        # ydata = y + y_noise
        # Add noise to each channel
        #noise_level = 1.5
        y_with_noise_inphase    = y_inphase + noise_level * np.random.normal(size=y_inphase.shape)
        y_with_noise_quadrature = y_quadrature + noise_level * np.random.normal(size=y_quadrature.shape)

        # Calculate phase angle
        phase_angle = np.arctan2(np.imag(y_with_noise_inphase) - np.imag(y_with_noise_quadrature), np.real(y_with_noise_inphase) - np.real(y_with_noise_quadrature))
        #print('phase_angle:',phase_angle)


        # Apply phase rotation to quadrature channel
        y_imaginary = y_with_noise_quadrature * np.exp(-1j * phase_angle)

        # Combine real and imaginary channels to create final echo train
        echo_train_real = y_with_noise_inphase + np.real(y_imaginary)
        echo_train_imaginary = np.imag(y_imaginary)
        #y_noise  = noise * np.random.normal(size=xdata.size)
        #ydata = y + y_noise
        ydata = echo_train_real
    


        '''
          Store Echo Trains in np array
        '''
        echo.append(ydata)
        #yecho = pd.DataFrame(echo)  
        #yecho = echo

        ''' This is stacking of echo trains for better S/N'''
        if index > stack_levels -1:

            if stack_levels == 1:           
                ystack = ydata
            else:
                for k in range(1,stack_levels): 

                    if stack_levels == 2:
                        ystack = (echo[index-1]+echo[index])/stack_levels                 
                    elif stack_levels == 3:
                        ystack = (echo[index-2]+echo[index-1]+echo[index])/stack_levels
                    elif stack_levels ==4:
                        ystack = (echo[index-3]+echo[index-2]+echo[index-1]+echo[index])/stack_levels
                    elif stack_levels == 5:
                        ystack = (echo[index-4]+echo[index-3]+echo[index-2]+echo[index-1]+echo[index])/stack_levels
                    elif stack_levels == 6:
                        ystack = (echo[index-5]+echo[index-4]+echo[index-3]+echo[index-2]+echo[index-1]+echo[index])/stack_levels    
                    elif stack_levels == 7:
                        ystack = (echo[index-6]+echo[index-5]+echo[index-4]+echo[index-3]+echo[index-2]+echo[index-1]+echo[index])/stack_levels    
                    elif stack_levels == 8:
                        ystack = (echo[index-7]+echo[index-6]+echo[index-5]+echo[index-4]+echo[index-3]+echo[index-2]+echo[index-1]+echo[index])/stack_levels    
                    elif stack_levels == 9:
                        ystack = (echo[index-8]+echo[index-7]+echo[index-6]+echo[index-5]+echo[index-4]+echo[index-3]+echo[index-2]+echo[index-1]+echo[index])/stack_levels    

                    else:
                        print('Stack Levels out of bounds')
           

            '''
            -----------------------------------------------------------------------------------------------
              Optimization using SciPy with regularization: 
            -----------------------------------------------------------------------------------------------
            '''
            # Fit the function to the data with regularization
            bnds = [(0, 20)]*8
            
            if method == 'least_squares' : 
                # Set the value of alpha
                alpha = alpha
                # Set the initial parameter values
                p0 = np.ones(8)
                bounds = ([0]*8, [20]*8)
                # Fit the data to the function with L2 regularization using scipy.optimize
                result = least_squares(objective, p0, args=(xdata, ystack, alpha), bounds=bounds)
                popt = result.x
            elif method == 'Optimize':
                lambda_ = alpha  #started with 0.1
                p0 = np.ones(8)
                result = minimize(obj_func, p0, args=(xdata, ystack, lambda_), method='L-BFGS-B', bounds=[(0, 20)]*8)
                popt = result.x
            elif method == 'Curve_fit_simple' : 
                #lambda_ = lambda_
                #p0 = np.ones(8)
                #popt, pcov = curve_fit(obj_func, p0, y_data, args=(xdata, lambda_))
                popt, pcov = curve_fit(func, xdata, ystack, method='trf', bounds=(0.05, [20, 20, 20, 20, 20, 20, 20, 20]))        
                #popt, pcov = curve_fit(obj_func, p0, xdata, ystack, lambda_ ,bounds= (0.05, [20, 20, 20, 20, 20, 20, 20, 20]))        




            ''' Calculate BVI, MFFI and MPHI '''
            mbvi.append(popt[0]+popt[1]+popt[2]+0.044*popt[3])    
            mphi.append(popt[0]+popt[1]+popt[2]+popt[3]+popt[4]+popt[5]+popt[6]+popt[7])
            mffi.append((1-0.044)*popt[3]+popt[4]+popt[5]+popt[6]+popt[7])
            depth3.append(depth2)

            multiplier = (1 - level_spacing)/2
            deptharray.append(depth - (stack_levels-1)/2 + multiplier*(stack_levels-1))
            
            #print('Depth3 =',depth3,'MPHI =',mphi)


            optbins.append([P0,popt[0],popt[1],popt[2],popt[3],popt[4],popt[5],popt[6],popt[7], P9])
            T2       = [    2,  4,      8,      16,     32,     64,     128,     256,   512,   1024]
            bins     = [    P0, P1,     P2,     P3,     P4,     P5,      P6,      P7,    P8,    P9]
            opt      = ([P0,popt[0],popt[1],popt[2],popt[3],popt[4],popt[5],popt[6],popt[7], P9])


            '''
            Store Fit and Echo Trains in np array
            '''
            echo_out.append(ystack)
            fit.append(func(xdata, *popt))



 



    # Store data into geolog
    geolog.puttable()










